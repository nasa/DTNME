/*
 *    Copyright 2015 United States Government as represented by NASA
 *       Marshall Space Flight Center. All Rights Reserved.
 *
 *    Released under the NASA Open Source Software Agreement version 1.3;
 *    You may obtain a copy of the Agreement at:
 * 
 *        http://ti.arc.nasa.gov/opensource/nosa/
 * 
 *    The subject software is provided "AS IS" WITHOUT ANY WARRANTY of any kind,
 *    either expressed, implied or statutory and this agreement does not,
 *    in any manner, constitute an endorsement by government agency of any
 *    results, designs or products resulting from use of the subject software.
 *    See the Agreement for the specific language governing permissions and
 *    limitations.
 */

#ifndef _EHS_EVENT_HANDLER_H_
#define _EHS_EVENT_HANDLER_H_


#include <third_party/oasys/debug/Log.h>

#include "EhsEvent.h"

namespace dtn {

/**
 * Both the EhsDaemon and all the EhsRouter classes need to
 * process the various types of EhsEvent that are generated by the
 * rest of the system. This class provides that abstraction plus a
 * useful dispatching function for event-specific handlers.
 */
class EhsEventHandler : public oasys::Logger {
public:
    /**
     * Pure virtual event handler function.
     */
    virtual void handle_event(EhsEvent* event) = 0;

protected:
    /**
     * Constructor -- protected since this class shouldn't ever be
     * instantiated directly.
     */
    EhsEventHandler(const char* classname,
                    const char* format,
                    const char* path)
        : oasys::Logger(classname, format, path) {}
    
    /**
     * Destructor -- Needs to be defined virtual to be sure that
     * derived classes get a chance to clean up their stuff on removal.
     */
    virtual ~EhsEventHandler() {}

    /** 
     * Dispatch the event by type code to one of the event-specific
     * handler functions below.
     */
    void dispatch_event(EhsEvent* event);
    
    /**
     * Default event handlers
     */
    virtual void handle_cbor_received(EhsCborReceivedEvent* event);
    virtual void handle_free_bundle_req(EhsFreeBundleReq* event);
    virtual void handle_route_bundle_req(EhsRouteBundleReq* event);
    virtual void handle_route_bundle_list_req(EhsRouteBundleListReq* event);
    virtual void handle_delete_bundle_req(EhsDeleteBundleReq* event);
    virtual void handle_reconfigure_link_req(EhsReconfigureLinkReq* event);
    virtual void handle_bundle_transmitted_event(EhsBundleTransmittedEvent* event);
    
};

} // namespace dtn


#endif /* _EHS_EVENT_HANDLER_H_ */
