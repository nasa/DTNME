dnl
dnl    Copyright 2005-2006 Intel Corporation
dnl 
dnl    Licensed under the Apache License, Version 2.0 (the "License");
dnl    you may not use this file except in compliance with the License.
dnl    You may obtain a copy of the License at
dnl 
dnl        http://www.apache.org/licenses/LICENSE-2.0
dnl 
dnl    Unless required by applicable law or agreed to in writing, software
dnl    distributed under the License is distributed on an "AS IS" BASIS,
dnl    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
dnl    See the License for the specific language governing permissions and
dnl    limitations under the License.
dnl

dnl -------------------------------------------------------------------------
dnl Checks for system programs
dnl -------------------------------------------------------------------------
AC_DEFUN(AC_OASYS_SYSTEM_PROGRAMS, [
    AC_PROG_AWK
    AC_PROG_INSTALL
    AC_PROG_MAKE_SET
    AC_PROG_RANLIB
])

dnl -------------------------------------------------------------------------
dnl Checks for system libraries
dnl -------------------------------------------------------------------------
AC_DEFUN(AC_OASYS_SYSTEM_LIBRARIES, [
    AC_EXTLIB_PREPARE

    AC_SEARCH_LIBS(pthread_create, pthread, [], 
      AC_MSG_ERROR([can't find required library function (pthread_create)]))

    AC_SEARCH_LIBS(pthread_yield, [rt pthread],
                   AC_DEFINE_UNQUOTED(HAVE_PTHREAD_YIELD, 1, [wether pthread_yield exists]),
                   [])

    AC_SEARCH_LIBS(sched_yield, [rt],
                   AC_DEFINE_UNQUOTED(HAVE_SCHED_YIELD, 1, [wether sched_yield exists]),
                   [])

    AC_SEARCH_LIBS(pthread_setspecific, pthread, 
                   AC_DEFINE_UNQUOTED(HAVE_PTHREAD_SETSPECIFIC, 1, 
                                      [whether pthread_setspecific is defined]), 
                   [])

    AC_SEARCH_LIBS(socket, socket, [],
      AC_MSG_ERROR([can't find required library function (socket)]))

    AC_SEARCH_LIBS(gethostbyname, [socket nsl xnet],
                   AC_DEFINE_UNQUOTED(HAVE_GETHOSTBYNAME, 1, [wether gethostbyname exists]),
                   [])

    AC_SEARCH_LIBS(gethostbyname_r, [socket nsl],
                   AC_DEFINE_UNQUOTED(HAVE_GETHOSTBYNAME_R, 1, [wether gethostbyname_r exists]),
                   [])

    AC_SEARCH_LIBS(inet_aton, [nsl resolv socket],
                   AC_DEFINE_UNQUOTED(HAVE_INET_ATON, 1, [wether inet_aton exists]),
                   [])

    AC_SEARCH_LIBS(inet_pton, [nsl resolv socket],
                   AC_DEFINE_UNQUOTED(HAVE_INET_PTON, 1, [wether inet_pton exists]),
                   [])

    AC_EXTLIB_SAVE
])

dnl -------------------------------------------------------------------------
dnl Checks for RPC [and XDR] header files and library
dnl -------------------------------------------------------------------------
AC_DEFUN(AC_OASYS_RPC_FUNCS, [
    AC_EXTLIB_PREPARE

    ac_rpc_in_stdc_lib=no
    ac_rpc_in_tiprpc_lib=no
    AC_CHECK_FILE(/usr/include/rpc/rpc.h, [ac_rpc_in_stdc_lib=yes], [])

    if test $ac_rpc_in_stdc_lib = yes ; then
        AC_SEARCH_LIBS(xdr_int, rpc, [],
              AC_MSG_ERROR([can't find required library function (xdr_int) in std c lib]))

        AC_SEARCH_LIBS(xdr_u_int64_t, ,
                       AC_DEFINE_UNQUOTED(HAVE_XDR_U_INT64_T, 1, [whether xdr_u_int64_t exists]),
                       [])

        AC_SEARCH_LIBS(xdr_u_quad_t, ,
                       AC_DEFINE_UNQUOTED(HAVE_XDR_U_QUAD_T, 1, [whether xdr_u_quad_t exists]),
                       [])

    else
        AC_CHECK_FILE(/usr/include/tirpc/rpc/rpc.h, [CFLAGS=-I/usr/include/tirpc], [])

        AC_SEARCH_LIBS(xdr_int, tirpc, [LIBS=-ltirpc],
              AC_MSG_ERROR([can't find required library function (xdr_int)]))

        AC_SEARCH_LIBS(xdr_u_int64_t, tirpc,
                       AC_DEFINE_UNQUOTED(HAVE_XDR_U_INT64_T, 1, [whether xdr_u_int64_t exists]),
                       [])

        AC_SEARCH_LIBS(xdr_u_quad_t, tirpc,
                       AC_DEFINE_UNQUOTED(HAVE_XDR_U_QUAD_T, 1, [whether xdr_u_quad_t exists]),
                       [])

    fi

    AC_EXTLIB_SAVE
])

dnl -------------------------------------------------------------------------
dnl Checks for header files.
dnl -------------------------------------------------------------------------
AC_DEFUN(AC_OASYS_SYSTEM_HEADERS, [
    AC_HEADER_STDC
    AC_CHECK_HEADERS([err.h execinfo.h stdint.h string.h synch.h sys/cdefs.h sys/types.h])
])

dnl -------------------------------------------------------------------------
dnl Checks for typedefs, structures, and compiler characteristics.
dnl -------------------------------------------------------------------------
AC_DEFUN(AC_OASYS_SYSTEM_TYPES, [
    AC_C_CONST
    AC_C_INLINE
    AC_C_VOLATILE
    AC_TYPE_MODE_T
    AC_MSG_CHECKING([value for _FILE_OFFSET_BITS preprocessor symbol])
    ac_file_offset_bits=64
    AC_ARG_WITH(file-offset-bits,
	AS_HELP_STRING([--with-file-offset-bits=N],
		       [value for _FILE_OFFSET_BITS (default 64)]),
		       ac_file_offset_bits=$withval)
    AC_MSG_RESULT($ac_file_offset_bits)
    if test $ac_file_offset_bits = 64 ; then
        SYS_CFLAGS="-D_LARGEFILE_SOURCE=1 -D_FILE_OFFSET_BITS=64"
    else 
        SYS_CFLAGS="-D_FILE_OFFSET_BITS=$ac_file_offset_bits"
    fi
    AC_SUBST(SYS_CFLAGS)
    oasys_ac_cppflags_save="$CPPFLAGS"
    CPPFLAGS="$SYS_CFLAGS $CPPFLAGS"
    AC_CHECK_SIZEOF(off_t)
    CPPFLAGS="$oasys_ac_cppflags_save"
    AC_TYPE_SIGNAL
    AC_TYPE_SIZE_T
    AC_CHECK_TYPES([ptrdiff_t])
    AC_CHECK_TYPES([uint32_t])
    AC_CHECK_TYPES([u_int32_t])
])

dnl -------------------------------------------------------------------------
dnl Checks for library functions.
dnl -------------------------------------------------------------------------
AC_DEFUN(AC_OASYS_SYSTEM_FUNCTIONS, [
    # XXX/demmer get rid of me
    AC_CHECK_FUNCS([getaddrinfo getopt_long cfmakeraw cfsetspeed])
])                                


AC_DEFUN(AC_OASYS_SYSTEM_FDATASYNC, [
    AC_CACHE_CHECK([working fdatasync],[ac_cv_func_fdatasync],[
     ÊAC_LANG_PUSH(C++)
     ÊAC_RUN_IFELSE([AC_LANG_PROGRAM([[
    #include <unistd.h>
     Ê Ê]],[[
    fdatasync(4);
     Ê Ê]])],
     Ê[ac_cv_func_fdatasync=yes],
     Ê[ac_cv_func_fdatasync=no])
     ÊAC_LANG_POP()
    ])
    AS_IF([test "x${ac_cv_func_fdatasync}" = "xyes"],
     Ê[AC_DEFINE([HAVE_FDATASYNC],[1],[If the system has a working fdatasync])])
])                                

dnl -------------------------------------------------------------------------
dnl Check all the system requirements
dnl -------------------------------------------------------------------------
AC_DEFUN(AC_OASYS_CONFIG_SYSTEM, [
    AC_OASYS_SYSTEM_PROGRAMS
    AC_OASYS_SYSTEM_LIBRARIES
    AC_OASYS_SYSTEM_HEADERS
    AC_OASYS_SYSTEM_TYPES
    AC_OASYS_SYSTEM_FUNCTIONS
    AC_OASYS_RPC_FUNCS
])

